#!/usr/sbin/nft -f

# interfaces
define public_if = "{{ podnet_public_ifname }}"
define mgmt_if = "{{ podnet_mgmt_ifname }}"

# for cop and region
define pgadmin_ipv6 = {{ docker_mgmt_ip6 }}5002:1

# for cop
define cop_apacheds_ipv6 = {{ docker_mgmt_ip6 }}5002:2
define cop_nginxcop_ipv4 = {{ pms4 }}
define cop_nginxcop_ipv6 = {{ docker_mgmt_ip6 }}4004:a
define cop_portal_ipv4 = {{ pms5 }}
define cop_portal_ipv6 = {{ docker_mgmt_ip6 }}5002:4

# for region
define pod_appliance = {{ ip6 }}6000:1
define robot_ipv6 = {{ docker_mgmt_ip6 }}6001:1
define robotworker_ipv6 = {{ docker_mgmt_ip6 }}6001:2
define region_flower_ipv6 = {{ docker_mgmt_ip6 }}6002:4
define region_hyperv_ipv6 = {{ ip6[:-1] }}0:0:20::/96
define region_kvm_ipv6 = {{ ip6[:-1] }}0:0:30::/96
define region_truenas_ipv6 = {{ ip6[:-1] }}0:0:40::/96
define region_gpu_ipv6 = {{ ip6[:-1] }}0:0:50::/96
define region_ceph_ipv6 = {{ ip6[:-1] }}0:0:60::/96

# Flush the rule set
flush ruleset

# RoboSOC related, this won't hinder even if robosoc not supported.
include "/etc/cloudcix/robosoc/*.nft"

table inet default_firewall {

    # to accept a traffic that is already qualified, this chain is applied only when used in main chains
    chain global {
        ct state established,related accept
    }

    # appropriate properties of ping to be allowed for better debug and response,
    # this chain can only be called in main chains
    chain icmp_allow {
        icmp type { destination-unreachable, echo-reply, echo-request, time-exceeded } accept
        icmpv6 type {echo-request,nd-neighbor-solicit,nd-neighbor-advert,nd-router-solicit, nd-router-advert,mld-listener-query} accept
    }

    # IKE and IPSec
    chain vpn {
        # IKE 500, 4500 ports and udp protocol
        meta l4proto udp th dport { 500, 4500 } accept
        # Allow IPSec esp protocol
        ip protocol esp accept
    }

    # Forward chain related chains:
    chain mgmt_inbound {
        # ping allow hosts in Management network for Pingplotter, other monitoring tools
        jump icmp_allow

        {% if pod_number != '0' %}
        # Non-PAT
        # PAT VDIs SSH access to Pod Appliance

        # PAT VDIs to pgadmin4 IPv6 over port 80

        {% if cop %}
        # Non-PAT COP
        # PAT VDIs to COP apacheds IPv6 over port 10389
        {% endif %}

        {% if region %}
        # Non-PAT Region
        # PAT VDIs to Region HyperV hosts over port 3389(RDP)

        # PAT VDIs to Region KVM hosts over port 22(SSH)

        # PAT VDIs to Region KVM GPU hosts over port 22(SSH)

        # PAT VDIs to Region CEPH hosts over port 22(SSH)

        # PAT VDIs to Region TrueNAS hosts over port 22(SSH) 80(HTTP) and 443(HTTPS)
        {% endif %}
        {% endif %}

        # COP only
        {% if cop %}
        # COP Nginx IPv4 and IPv6 443
        ip daddr $cop_nginxcop_ipv4 tcp dport 443 accept
        ip6 daddr $cop_nginxcop_ipv6 tcp dport 443 accept
        # COP Portal IPv4 and IPv6 443
        ip daddr $cop_portal_ipv4 tcp dport 443 accept
        ip6 daddr $cop_portal_ipv6 tcp dport 443 accept
        # End COP only
        {% endif %}

    }

    # Forwarding Main Chain:
    chain forward {
        # base chain rule properties
        type filter hook forward priority filter; policy drop;

        # Default allow for Mgmt and Private
        jump global

        # dns
        meta l4proto {tcp, udp} th dport 53 accept

        # vpn
        jump vpn

        # Mgmt (Inbound)
        oifname $mgmt_if jump mgmt_inbound

        # Outbound Allow all
        oifname != $mgmt_if accept

        # inbound and outbound for private networks are all allowed on Master namespace
        # but are controlled in Project namespaces.

    }

    # Access to Podnet box
    chain inbound {
        # base chain rule properties
        type filter hook input priority filter; policy drop;

        jump global

        # allow ping on podnet host for Monitoring or Pingplotter
        jump icmp_allow

        # allow dns
        meta l4proto {tcp, udp} th dport 53 accept

        # allow vpn
        iifname $public_if jump vpn

        # allowing ssh from:
        # Pod Appliance to debug and Robot for Projects
        iifname $mgmt_if ip6 saddr { $robot_ipv6, $robotworker_ipv6, $pod_appliance } tcp dport 22 accept

        # PAT app for adoption and provisioning

    }

    # allow all packets sent by the Podnet box itself
    chain output {
        type filter hook output priority filter; policy accept;
        # drop invalid traffic
        ct state invalid drop
    }

}
#!/usr/sbin/nft -f

# interfaces
define public_if = "{{ podnet_public_interface }}"
define mgmt_if = "{{ podnet_management_interface }}"

# for cop and region
define pgadmin_ipv6 = {{ docker_mgmt_ip6 }}5002:1

# for cop
define cop_apacheds_ipv6 = {{ docker_mgmt_ip6 }}5002:2
define cop_nginxcop_ipv4 = {{ pms4 }}
define cop_nginxcop_ipv6 = {{ docker_mgmt_ip6 }}4004:a
define cop_portal_ipv4 = {{ pms5 }}
define cop_portal_ipv6 = {{ docker_mgmt_ip6 }}5002:4

# for region
define pod_appliance = {{ ip6 }}6000:1
define robot_ipv6 = {{ docker_mgmt_ip6 }}6001:1
define robotworker_ipv6 = {{ docker_mgmt_ip6 }}6001:2
define region_flower_ipv6 = {{ docker_mgmt_ip6 }}6002:4
define region_hyperv_ipv6 = {{ ip6[:-1] }}0:0:20::/96
define region_kvm_ipv6 = {{ ip6[:-1] }}0:0:30::/96
define region_truenas_ipv6 = {{ ip6[:-1] }}0:0:40::/96
define region_gpu_ipv6 = {{ ip6[:-1] }}0:0:50::/96
define region_ceph_ipv6 = {{ ip6[:-1] }}0:0:60::/96

# Flush the rule set
flush ruleset

# RoboSOC related, this won't hinder even if robosoc not supported.
include "/etc/cloudcix/robosoc/*.nft"

table inet default_firewall {

    # to accept a traffic that is already qualified, this chain is applied only when used in main chains
    chain global {
        ct state established,related accept
    }

    # appropriate properties of ping to be allowed for better debug and response,
    # this chain can only be called in main chains
    chain icmp_allow {
        icmp type { destination-unreachable, echo-reply, echo-request, time-exceeded } accept
        icmpv6 type {echo-request,nd-neighbor-solicit,nd-neighbor-advert,nd-router-solicit, nd-router-advert,mld-listener-query} accept
    }

    # IKE and IPSec
    chain vpn {
        # IKE 500, 4500 ports and udp protocol
        meta l4proto udp th dport { 500, 4500 } accept
        # Allow IPSec esp protocol
        ip protocol esp accept
    }

    # Forward chain related chains:
    chain mgmt_inbound {
        # ping allow hosts in Management network for Pingplotter, other monitoring tools
        jump icmp_allow

        {% if pod_number != '0' %}
        # Non-PAT
        # PAT VDIs SSH access to Pod Appliance

        # PAT VDIs to pgadmin4 IPv6 over port 80

        {% if cop %}
        # Non-PAT COP
        # PAT VDIs to COP apacheds IPv6 over port 10389
        {% endif %}

        {% if region %}
        # Non-PAT Region
        # PAT VDIs to Region HyperV hosts over port 3389(RDP)

        # PAT VDIs to Region KVM hosts over port 22(SSH)

        # PAT VDIs to Region KVM GPU hosts over port 22(SSH)

        # PAT VDIs to Region CEPH hosts over port 22(SSH)

        # PAT VDIs to Region TrueNAS hosts over port 22(SSH) 80(HTTP) and 443(HTTPS)
        {% endif %}
        {% endif %}

        # COP only
        {% if cop %}
        # COP Nginx IPv4 and IPv6 443
        ip daddr $cop_nginxcop_ipv4 tcp dport 443 accept
        ip6 daddr $cop_nginxcop_ipv6 tcp dport 443 accept
        # COP Portal IPv4 and IPv6 443
        ip daddr $cop_portal_ipv4 tcp dport 443 accept
        ip6 daddr $cop_portal_ipv6 tcp dport 443 accept
        # End COP only
        {% endif %}

    }

    # Forwarding Main Chain:
    chain forward {
        # base chain rule properties
        type filter hook forward priority filter; policy drop;

        # Default allow for Mgmt and Private
        jump global

        # dns
        meta l4proto {tcp, udp} th dport 53 accept

        # vpn
        jump vpn

        # Mgmt (Inbound)
        oifname $mgmt_if jump mgmt_inbound

        # Outbound Allow all
        oifname != $mgmt_if accept

        # inbound and outbound for private networks are all allowed on Master namespace
        # but are controlled in Project namespaces.

    }

    # Access to Podnet box
    chain inbound {
        # base chain rule properties
        type filter hook input priority filter; policy drop;

        jump global

        # allow ping on podnet host for Monitoring or Pingplotter
        jump icmp_allow

        # allow dns
        meta l4proto {tcp, udp} th dport 53 accept

        # allow vpn
        iifname $public_if jump vpn

        # allowing ssh from:
        # Pod Appliance to debug and Robot for Projects
        iifname $mgmt_if ip6 saddr { $robot_ipv6, $robotworker_ipv6, $pod_appliance } tcp dport 22 accept

        # PAT app for adoption and provisioning

    }

    # allow all packets sent by the Podnet box itself
    chain output {
        type filter hook output priority filter; policy accept;
        # drop invalid traffic
        ct state invalid drop
    }

}
